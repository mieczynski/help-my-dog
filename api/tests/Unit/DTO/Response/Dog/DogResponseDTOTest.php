<?php

declare(strict_types=1);

namespace App\Tests\Unit\DTO\Response\Dog;

use App\DTO\Response\Dog\DogResponseDTO;
use App\Entity\Dog;
use App\Entity\User;
use PHPUnit\Framework\TestCase;

class DogResponseDTOTest extends TestCase
{
    public function testFromEntityMapsAllFieldsCorrectly(): void
    {
        // Arrange
        $user = new User();
        $user->setEmail('test@example.com');
        $user->setPasswordHash('hashed_password');

        $dog = new Dog();
        $dog->setUser($user);
        $dog->setName('Rex');
        $dog->setBreed('German Shepherd');
        $dog->setAgeMonths(24);
        $dog->setGender('male');
        $dog->setWeightKg('35.50');
        $dog->setEnergyLevel('high');

        // Use reflection to set the id since it's generated by Doctrine
        $reflection = new \ReflectionClass($dog);
        $idProperty = $reflection->getProperty('id');
        $idProperty->setAccessible(true);
        $idProperty->setValue($dog, 'dog-uuid-123');

        // Act
        $dto = DogResponseDTO::fromEntity($dog);

        // Assert
        $this->assertSame('dog-uuid-123', $dto->id);
        $this->assertSame('Rex', $dto->name);
        $this->assertSame('German Shepherd', $dto->breed);
        $this->assertSame(24, $dto->ageMonths);
        $this->assertSame('male', $dto->gender);
        $this->assertSame(35.50, $dto->weightKg);
        $this->assertSame('high', $dto->energyLevel);
        $this->assertInstanceOf(\DateTimeImmutable::class, $dto->createdAt);
        $this->assertInstanceOf(\DateTimeImmutable::class, $dto->updatedAt);
    }

    public function testWeightKgConversionFromStringToFloat(): void
    {
        // Arrange
        $user = new User();
        $user->setEmail('test@example.com');
        $user->setPasswordHash('hashed_password');

        $dog = new Dog();
        $dog->setUser($user);
        $dog->setName('Rex');
        $dog->setBreed('German Shepherd');
        $dog->setAgeMonths(24);
        $dog->setGender('male');
        $dog->setWeightKg('42.75');
        $dog->setEnergyLevel('high');

        // Use reflection to set the id
        $reflection = new \ReflectionClass($dog);
        $idProperty = $reflection->getProperty('id');
        $idProperty->setAccessible(true);
        $idProperty->setValue($dog, 'dog-uuid-456');

        // Act
        $dto = DogResponseDTO::fromEntity($dog);

        // Assert - verify it's a float, not a string
        $this->assertIsFloat($dto->weightKg);
        $this->assertSame(42.75, $dto->weightKg);
    }
}
